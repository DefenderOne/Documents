2. Отсутствие упорядоченности кортежей
Для того, чтобы выбрать из отношения кортежа в некотором порядке, всегда необходимо указывать этот порядок. Если же порядок не указан, то СУБД может возвратить кортежи в любом порядке. 
3. Свойство отсутствия упорядоченности атрибутов
4. Атомарность значений атрибутов и первая нормальная форма отношений
Значения всех атрибутов являются атомарными или скалярными. Каждому атрибуту соответствуют скалярный тип данных. Значение каждого атрибута принадлежит некому скалярному типу данных (числовой, строковый, дата и логический). Современные СУБД позволяют определять также другие категории типов. Требование атомарности значений атрибутов состоит в том, что реляционная СУБД не должна обеспечивать пользователям явной видимости внутренней структуры значения (иначе работать со значениями можно только с помощью предоставленного набора операций). В частности значением реляционного атрибута не может быть массив скалярных значений или их списком, или структурой, состоящей из скалярных значений. 
Отношения, содержащие только атомарные значений, называются нормализованными отношениями. Нормализованные отношения составляют основу классического реляционного подхода к базам данных. Они обладают некоторыми ограничениями, поскольку не всякую информацию не очень удобно представить в виде таблиц. Но такая организация существенно упрощает манипулирование данными. Другие модели данных позволяют работать с ненормализованными аналогами отношений. Однако это менее эффективно.
Перечисленные свойства отношений характеризуют реляционную модель данных вне заависимости от ее конкретной реализации. Модель данных описывает некий набор родовых понятий-признаков, которыми должны обладать все конкретные СУБД и управляемые ими БД, если они основываются на этой модели. Слово родовой означает понятие, относящее к некоторому типу, который может иметь экземпляр. Понятие модели данных наиболее детально разработано к применении к реляционной модели
Традиционно считается, что модель данных, особенно реляционная, состоит из трех частей.
1. Структурная часть говорит о том, в каких стуктурах хранится. Для реляционной БД все хранится в отношениях. Нет ничего кроме таблиц. В объектной модели хранится информация и классах.
2. Манипуляционная часть говорит о том, какие действия мы можем производить с данными. В реляционной модели содержится два варианта взаимодействия: 1) Реляционная алгебра, основанная на теории множеств; 2) Реляционные исчисления, основанные на математической логике, а именно именно исчисления предикатов. Эти два механизма предлагает один и тот по мощности набор операций. Иными словами, если какую-то операцию можно выразить с помощью реляционной алгебры, то ее можно выразить и с помощью реляционного исчисления. Реляционная алгебра предлагает т.н. процедурный или императивный подход к манипулированию данными. Язык SQL содержит элементы как реляционный алгебры, так и реляционного исчисления. 
3. Целостная часть говорит о том, какие требования соответсвия данных, или другими словами какие ограничения целостности, мы можем накладывать.
Все реляционные СУБД должны поддерживать два основных требования целостности: 1) требование целостности сущности, оно основано на том, что все кортежи некоторого отношения соответствуют некоторым реальным объектам предметной области. Для того, чтобы одному объекту соответствовал только один кортеж, а разным объектам соотв. разные кортежи, мы должны всегда иметь возможность различить два разных кортежа одного отношения по некоторому набору атрибутов. Полностью требование целостности сущности звучит так: у любой переменной отношения должен быть первичный ключ, и никакое значение первичного ключа в кортежах этого отношения не должно содержать неопределенных значений (null-значений). Требование к целостности сущности означает, что первичный ключ должнен полностью и однозначно идентифицировать сущность. В классической реляционной модели требование запрета null-значений действует также для возможных ключей. В языке SQL оно может и не выполняться. 2) Требование целостности по ссылкам или требование целостности внешнего ключа. Некоторый набор атрибутов, ссылающийся на первичный ключ другого или того же самого отношения. Для каждого значения внешнего ключа, появл. в некотором кортеже отношения либо в значении отношения, в которое входит первичный ключ, должен найтись кортеж с таким же значением первичного ключа, либо значение внешнего ключа должно быть неопределенным, т.е. состоять только из двух значений. Как и первичный ключ внешний ключ должен специфироваться при описании, иными словами обязанность созданий внешних ключей лежит на администраторе БД.