Стандартная библиотека C++ - важная составляющая структура языка, обеспечивающая универсальный набор классов и функций, применимых в широком спектре задач. Библиотека развивается вместе с языком в соответствии с современными тенденциями. Для улучшения совместимости с языком C библиотека включает в себя большинство стандартных заголовочных файлов из C, доступных как по старому имени (#include <windows.h>), так и по новому с префиксу с (#include <cmath>). Рекомендуется использоваться второй способ. Крупной частью библиотеки С++ является библиотека стандартных шаблонов (STL - Standard Template Library), содержащая обобщенные реализации некоторых контейнеров, алгоритмов, функторов и умных указателей, в том числе итераторов. Стандарт языка не оперирует термином STL, так что деление библиотеки на STL и не STL можно считать условным. Все имена стандартной библиотеки содержатся внутри пространства имен std. 

Контейнеры - специализированные классы, предназначенные для хранения однотипных объектов и обеспечения доступа к ним. Разные контейнеры обеспечивают различную эффективность тех или иных операций. Большинство контейнеров поддерживают динамическое изменение собственного размера, т.е. информация о кол-ве элементов в контейнере всегда доступна. Для контейнеров доступен достаточно широкий набор операций. Контейнеры хранят копии переданных в них элементов. Так же в контейнерах можно хранить указатели на элементы. На объекты, которые могут быть сохранены в контейнере, накаладывается ряд ограничений. Типичными требованиями являются: наличие конструктора по умолчанию, копирующего конструктора, оператора копирующего присваивания, деструктора, операций сравнения на равенство и операции проверки на знак меньше. Контейнерные классы - это шаблоны. При использовании шаблонов необходимо конкретизировать их параметры. 

Последовательные контейнеры представляют собой упорядоченные коллекции, в которых каждый элемент занимает определенную позицию (vector, deque, list). 
1. vector является наиболее популярным контейнером и предоставляет быстрый доступ к элементам. Элементы внутри вектора в памяти хранятся линейным образом. Вектор может динамически изменять свой размер в процессе накопления или изъятия хранимых элементов. Вставка и удаление элементов в конце вектора является эффективной операцией, а вставка или удаление в общем случае имеет линейную сложность.
2. deque похож на класс vector, но поддерживает не только эффективные операции вставки или удаления в конце контейнера, но и эффективные операции вставки и удаления в начале контейнера. Доступ к элементам менее эффективен чем в случае вектора. Класс deque не гарантирует линейного расположения элементов в памяти. 
3. list реализует структуру двунаправленного списка. Преимущество: вставка и удаление элементов в произвольных позициях за константное время. Однако произвольный доступ к элементам имеет линейную сложность. Двунаправленный список позволяет осуществлять эффективную итерацию по своим элементам, как в прямом так и обратном порядке. 

Контейнеры-адаптеры
Обёртки над другими контейнерами, предоставляющие особый набор операций. 
1. stack предоставляет функциональность по вставке и извлечению элементов из конца (вершины). Базовый контейнер - deque. 
2. queue поддерживает операции вставки в конец и извлечения элемента из начала контейнера, а также операции доступа к первому и последнему элементу. Базовый контейнер - deque.
3. priority queue поддерживает операции аналогичные операции классу stack, но вставка элементов предполагает их неявную сортировку, так что операция извлечения всегда извлекает минимальный элемент коллекции. Вставка в уже упорядоченный массив (кучи) имеет логарифмическую сложность. В особых случаях может потребоваться определить дополнительным параметром шаблона функцию сравнения двух элементов коллекции. Базовый контейнер - vector. 
