Обходы деревьев
Нерекурсивный способ (с использованием стека)
int countEvenStack(Tree t) {
	Stack s;
	int evenCount = 0;
	Treet p = t;
	while (p != nullptr) {
		if (p->info % 2 == 0)
			evenCount++;
		if (p->left != nullptr) {
			if (p->right != nullptr)
				s.push(p->right);
			p = p->left;
		}
		else {
			if (p->right != nullptr)
				p = p->right;
			else
				if (s.Empty())
					p = nullptr;
				else
					p = s.pop();
		}
}

std::cout << countEvenStack(BT.GetTree());

Нерекурсивный способ (с использованием очереди)
int countEvenQueue(Tree t) {
	Queue q;
	int evenCount = 0;
	Tree p = t;
	q.Enqueue(t);
	while (!q.Empty()) {
		p = q.Dequeue();
		if (p->info % == 0)
			evenCount++;
		if (p->left != nullptr)
			q.Enqueue(p->left);
		if (p->right != nullptr)
			q.Enqueue(p->right);
	}
	return evenCount;
}

Дерево поиска
Все потомки абсолютно меньше текущего узла находятся слева от текущего узла, абсолютно большие - справа от текущего узла.

typedef int TInfo;

struct Node {
	TInfo info;
	int count;
	Node* left;
	Node* right;
};

typedef Node* Tree;

void Add(Tree& t, int elem) {
	if (t == nullptr) {
		t = new Node;
		t->info = elem;
		t->count = 1;
		t->left = nullptr;
		t->right = nullptr;
	} else
		if (elem < t->info)
			Add(t->left, elem);
		else
			if (elem > t->info)
				Add(t->right, elem);
			else
				t->count++;
}

void printOrder(Tree t) {
	if (t != nullptr) {
		printOrder(t->left);
		for (int i = 1; i <= t->count; i++) {
			std::cout << t->info;
		printOrder(t->right);
}

Удаление элемента из дерева
Процедура удаления элемента из дерева должна предусматривать три случая:
1. Удаляемой вершины в дереве нет
2. Удаляемая вершина имеет не более одного потомка (0 или 1)
	Если вершина не имеет потомков, она просто удаляется
	Если вершина имеет одного непустого потомка, то указатель на удаляемую вершину переключается на непустого потомка, а затем вершина удаляется.
3. Удаляемая вершина имеет два потомка
	Удаляемая вершина заменяется лексикографически смежным элементом, при этом этот смежный элемент нужно будет удалить из старой позиции.
	Или же самый большой в левом поддереве
	В этом случае заменяется самым правым элементов левого поддерева, либо самым левым элементов правого поддерева.
	Самым правым элементов называется первый элемент при спуске по правым веткам, у которого нет правого потомка.
	Самым левым элементом называется первый элемент при спуске по левым веткам, у которого нет левого потомка.
	После копирования значения лексикографическисмежный элемент удаляется как вершина, имеющая не более одного потомка.

Дерево-формула
Формула из одного терминала представляется деревом из одной вершины. 
А формула вида (<формула_left> <sign> <formula_right>) - деревом, в котором корень - знак, а левое и правое поддеревья - соответствующие представлениям.
Т.о. в дереве-формуле узлы - знаки, а листья - терминалы

Tree buildformula(ifstream& fin) {
	char c;
	c = fin.get();
	Tree t = new Node;
	if (c >= '0' && c <= '9') {
		t->info = c;
		t->right = nullptr;
		t->left = nullptr;
	} else {
		c->left = buildFormula(fin);
		t->info = fin.get();
		t->right = buildFormula(find);
		c = fin.get();
	}
	return t;
}

std::string toString(Tree t) {
	if (t->left == nullptr && t->right == nullptr) {
		std::string s;
		s += t->info;
		return s;
	} else {
		return '(' + toString(t->left) + t->info + toString(t->right) + ')';
}

int Calc(Tree t) {
	int result;
	if (t->left == nullptr && t->right == nullptr) {
		result = t->info - '0';
	} else {
		int leftF = Calc.
...
...
}
