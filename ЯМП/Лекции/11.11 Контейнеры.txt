В ассоциативных контейнерах доступ к элементам осуществляется не на основе их позиций, а на основе их значений
Ассоциативные контейнеры делятся на упорядоченные и неупорядоченные 
В случае упорядоченных коллекций для хранимых элементов должен быть определен порядок (Должна присутствовать операция сравнения. Операция сравнения может быть задана отдельным параметром шаблона). Сами же элементы хранятся упорядоченным образом, например в виде красно-черных деревьев. В случае неупорядоченных контейнеров для элементов должна быть вычислима хэш-функция (Отображает элемент в некоторое число в соответствии с его значением). Хорошо подобранные шэширующие функции способные практически константое время доступа к элемента при столь же быстрой возможности вставки или удаления. Для большинства примитивных типов C и некоторых классов стандартной библиотеки уже определена функция hash(). Упорядоченные контейнеры требуют логарифмической сложности для своих операций, но позволяют обойти элементы коллекций в соответствии с их порядком. 

Класс set представляет упорядоченный контейнер, соответствующий математическому понятию множество. В множестве хранятся только уникальные объекты. Множества поддерживают быструю операцию поиска (логарифмическое время). Вставка и удаление в общем случае так же операция с логарифмической сложностью. 

Класс multiset представляет собой контейнер, реализующий мультимножество. В отличии от обычных множеств, здесь можно хранить несколько копий одинаковых объектов. В остальном мультимножество идентично обычным множествам.

Класс map и multimap реализует классические ассоциативные массива, отображающие множество ключей на множество значений. Типы ключа и значения задаются как два независимых параметра шаблона. Т.о. в отличии от обычных последовательных контейнеров в качестве ключа в ассоциативных массивах выступает не число, а любой объект. Иногда ассоциативные массивы называют словарями. В качестве ключей можно использовать любые сравнимые объекты. Значения, доступные по ключам, не обязаны быть сравнимыми. К парам ключ-значение может быть получен доступ в порядке возрастания ключей. Операции вставки и удаления по ключу осуществляются за логарифмическое время. Класс map позволяет ассоциировать с каждым ключом лишь одно значение.

Умные указатели (smart pointer) - объекты, чье поведение подобно указателю. Для умных указателей перегружен оператор разыменовывания. Иногда возможен доступ к членам объекта с помощью оператора стрелочка. Для некоторых умных указателей доступны арифметические операции. 

Итератора (iterator) - объект, позволяющий перебирать элементы коллекции и предоставлять доступ к отдельным элементам без учета реализации этой коллекции. Итераторы можно использовать явно с помощью глобальных функций begin() и end() для перемещения по коллекции

Функторы (functor) - объекты, с перегруженным оператором вызова. Такие объекты синтаксически можно использовать подобно функциями или указателям на функции.

Стандартная библиотека содержит множество обобщенных алгоритмов для работы с контейнерами. Большинство алгоритмов принимают в качестве аргументов итераторы, тип используемого контейнера не имеет значения. Важно лишь, чтобы предоставляемый контейнером итератор подходил под требуемую алгоритмом категорию. Среди популярных алгоритмов можно выделить алгоритм итерации по всем элементам контейнера for_each, алгоритм подсчета числа элементов, удовлетворяющих некоторому условию count_if, алгоритмы поиска find or find_if, search or search_n, бинарного поиска binary_search, алгоритм удаления erase, алгоритм сортировка sort, 